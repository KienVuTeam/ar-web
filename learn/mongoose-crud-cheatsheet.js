/**
 * mongoose-crud-cheatsheet.js
 * T·ªïng h·ª£p c√°c ph∆∞∆°ng th·ª©c thao t√°c DB trong Mongoose
 */

//////////////////////
// üü¢ CREATE (T·∫°o m·ªõi)
//////////////////////

// C√°ch 1: new + save()
const doc = new Model({ field: "value" });
await doc.save();

// C√°ch 2: Model.create()
await Model.create({ field: "value" });

// C√°ch 3: insertMany
await Model.insertMany([{ field: "a" }, { field: "b" }]);


//////////////////////
// üîµ READ (ƒê·ªçc d·ªØ li·ªáu)
//////////////////////

// T√¨m nhi·ªÅu
await Model.find({ status: "active" });

// T√¨m m·ªôt
await Model.findOne({ email: "test@gmail.com" });

// T√¨m theo _id
await Model.findById("507f1f77bcf86cd799439011");

// Ki·ªÉm tra t·ªìn t·∫°i
await Model.exists({ username: "abc" });

// ƒê·∫øm
await Model.countDocuments({ status: "active" });
await Model.estimatedDocumentCount();

// Distinct
await Model.distinct("category");

// Aggregation
await Model.aggregate([{ $match: { status: "active" } }]);


//////////////////////
// üü† UPDATE (C·∫≠p nh·∫≠t)
//////////////////////

// Update m·ªôt
await Model.updateOne({ _id: id }, { $set: { name: "new name" } });

// Update nhi·ªÅu
await Model.updateMany({ status: "active" }, { $set: { status: "inactive" } });

// T√¨m m·ªôt + update
await Model.findOneAndUpdate(
  { email: "test@gmail.com" },       //filter
  { $set: { status: "active" } },    //update
  { new: true, runValidators: true } //options: tra ve document sau khi update
);

// T√¨m theo _id + update
await Model.findByIdAndUpdate(
  id,
  { $set: { name: "new name" } },
  { new: true }
);


//////////////////////
// üî¥ DELETE (X√≥a d·ªØ li·ªáu)
//////////////////////

// X√≥a m·ªôt
await Model.deleteOne({ _id: id });

// X√≥a nhi·ªÅu
await Model.deleteMany({ status: "inactive" });

// T√¨m m·ªôt + x√≥a
await Model.findOneAndDelete({ email: "test@gmail.com" });

// T√¨m theo _id + x√≥a
await Model.findByIdAndDelete(id);


/////////////////////////////////////////
// ‚ö° DOCUMENT INSTANCE METHODS (per doc)
/////////////////////////////////////////

const doc2 = await Model.findOne();
await doc2.save();          // l∆∞u
await doc2.remove();        // x√≥a
await doc2.deleteOne();     // x√≥a
doc2.toObject();            // convert object JS thu·∫ßn
doc2.toJSON();              // convert JSON
await doc2.populate("user"); // join d·ªØ li·ªáu (ref)
await doc2.validate();       // ch·∫°y validate


/////////////////////////////////////
// ‚ö° QUERY HELPERS (chaining query)
/////////////////////////////////////

await Model.find({ status: "active" })
  .select("name email")     // ch·ªçn field
  .sort({ createdAt: -1 })  // s·∫Øp x·∫øp
  .skip(10)                 // b·ªè qua 10 doc
  .limit(5)                 // gi·ªõi h·∫°n 5 doc
  .populate("category")     // join
  .lean();                  // object JS thu·∫ßn

  //===================== mongoose auto cast
// ‚úÖ T√≥m l·∫°i (Mongoose auto-cast)
// Client g·ª≠i	            Schema field	    K·∫øt qu·∫£
// "25" (string)	        Number	            25 (ok)
// 25 (number)	            String	            "25"
// "" (string r·ªóng)	        Number	            null
// null	                    Number/String	    null
// "abc"(string kh√¥ng s·ªë)	Number	            ‚ùå CastError
// Object/Array sai ki·ªÉu	Kh√¥ng match	        ‚ùå CastError