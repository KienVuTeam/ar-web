<!DOCTYPE html>
<html lang="vi">

<head>
  <meta charset="UTF-8" />
  <meta name="viewport" content="width=device-width, initial-scale=1.0" />
  <title>Text Designer</title>
  <script src="https://unpkg.com/konva@9/konva.min.js"></script>
  <script src="https://cdnjs.cloudflare.com/ajax/libs/jquery/3.7.0/jquery.min.js" integrity="sha512-3gJwYpMe3QewGELv8k/BX9vcqhryRdzRMxVfq6ngyWXwo03GFEzjsUm8Q7RZcHPHksttq7/GFoxjCVUjkjvPdw==" crossorigin="anonymous" referrerpolicy="no-referrer"></script>
  <link href="https://cdn.jsdelivr.net/npm/bootstrap@5.1.3/dist/css/bootstrap.min.css" rel="stylesheet" integrity="sha384-1BmE4kWBq78iYhFldvKuhfTAU6auU8tT94WrHftjDbrCEXSU1oBoqyl2QvZ6jIW3" crossorigin="anonymous">
<script src="https://cdn.jsdelivr.net/npm/bootstrap@5.1.3/dist/js/bootstrap.bundle.min.js" integrity="sha384-ka7Sk0Gln4gmtz2MlQnikT1wXgYsOg+OMhuP+IlRH9sENBO0LRn5q+8nbTov4+1p" crossorigin="anonymous"></script>
  <style>
    body {
      margin: 0;
      font-family: Arial, sans-serif;
    }

    /* Header cố định top */
    .header {
      position: fixed;
      top: 0;
      left: 0;
      right: 0;
      display: flex;
      align-items: center;
      justify-content: space-between;
      background: #fff;
      border-bottom: 1px solid #e0e0e0;
      padding: 10px 20px;
      z-index: 1000;
    }

    .header-left {
      display: flex;
      align-items: center;
      gap: 10px;
    }

    .logo {
      width: 40px;
      height: 40px;
      background: #7c3aed;
      color: #fff;
      font-weight: bold;
      display: flex;
      align-items: center;
      justify-content: center;
      border-radius: 10px;
    }

    .title {
      font-weight: bold;
      font-size: 18px;
    }

    .subtitle {
      font-size: 13px;
      color: #666;
    }

    .header-right {
      display: flex;
      gap: 10px;
    }



    /* Overlay mờ nền */
    .overlay {
      position: fixed;
      top: 0;
      left: 0;
      width: 100%;
      height: 100%;
      background: rgba(0, 0, 0, 0.4);
      opacity: 0;
      visibility: hidden;
      transition: 0.3s;
      z-index: 999;
    }

    .overlay.active {
      opacity: 1;
      visibility: visible;
    }

    /* Sidebar */
    .sidebar {
      position: fixed;
      top: 0;
      right: -400px;
      /* Ẩn ngoài màn hình */
      width: 350px;
      height: 100%;
      background: #fff;
      box-shadow: -2px 0 8px rgba(0, 0, 0, 0.15);
      transition: 0.3s;
      z-index: 1000;
      overflow-y: auto;
      padding: 20px;
    }

    .sidebar.active {
      right: 0;
      /* Trượt vào */
    }

    /* Nút đóng */
    .close-btn {
      background: none;
      border: none;
      font-size: 20px;
      float: right;
      cursor: pointer;
    }

    .field {
      margin-bottom: 15px;
    }

    .field label {
      display: block;
      font-size: 14px;
      margin-bottom: 5px;
      color: #555;
    }


    /* Nội dung chính */
    .main-container {
      margin-top: 80px;
      padding: 10px;
    }
    body{
      padding: 0 20px;
    }
  </style>
</head>

<body>
  <!-- Header -->
  <div class="header">
    <div class="header-left">
      <div class="logo">Tx</div>
      <div>
        <div class="title">Text Designer</div>
        <div class="subtitle">Kéo-thả text lên ảnh và liên kết dữ liệu</div>
      </div>
    </div>
    <div class="header-right">
      <button class="btn btn-outline-info" data-bs-toggle="modal" data-bs-target="#CertModal">position config</button>
      <button class="btn">Ảnh nền</button>
      
      <button class="btn">⭳ Xuất PNG</button>
    </div>
  </div>
  <!-- content here -->
   <h2 id="handlecontrol-header" class="mb-4 fw-bold" style="margin-top: 100px;">Control Volunteer</h2>
<section class="control-header">
  <div class="row g-4">
    <!-- LEFT SIDE -->
    <div class="col-md-6">
      <!-- Certificate Image Upload -->
      <div class="card shadow-sm mb-3">
        <div class="card-body">
          <h5 class="card-title">
            Certificate Image /
            <small><a href="/xlsx/VolunteerCert_Exemple.xlsx" download="">Sample File</a></small>
          </h5>
          <div class="mb-3">
            <label for="choose-certimg" class="form-label">Choose certificate image</label>
            <input type="file" id="choose-certimg" class="form-control" />
          </div>
          <div class="d-flex gap-2">
            <button class="btn btn-outline-primary w-50" id="cert-img-save">
              Lưu ảnh
            </button>
            <button type="button" class="btn btn-primary w-50" data-bs-toggle="modal" data-bs-target="#editorModal">
              Cert position
            </button>
          </div>
        </div>
      </div>

      <!-- Excel File Upload -->
      <div class="card shadow-sm">
        <div class="card-body">
          <h5 class="card-title">Excel File</h5>
          <div class="mb-3">
            <label for="fileExcel" class="form-label">Choose excel file</label>
            <input type="file" id="fileExcel" name="fileExcel" class="form-control" />
          </div>
          <button id="btn-submit" type="submit" class="btn btn-outline-primary w-100">
            Save file
          </button>
        </div>
      </div>
    </div>

    <!-- RIGHT SIDE -->
    <!-- RIGHT SIDE -->
    <div class="col-md-6">
      <div class="card shadow-sm">
        <div class="card-body d-flex justify-content-center align-items-center" style="min-height: 300px">
          <img src="" alt="Certificate preview" id="cert-preview" class="img-fluid rounded border d-none %>" />
          <span class="text-muted " id="cert-preview-placeholder">
            Preview will appear here
          </span>
        </div>
      </div>
      <div id="result" class="mt-3"></div>
    </div>
  </div>
</section>
   <!-- content end -->

  <!-- bat modal -->
   <!-- Modal -->
<div class="modal fade" id="CertModal" tabindex="-1" aria-labelledby="exampleModalLabel" aria-hidden="true">
  <div class="modal-dialog modal-fullscreen">
    <div class="modal-content">
      <div class="modal-header">
        <h1 class="modal-title fs-5" id="exampleModalLabel">Modal title</h1>
        <div class="dflex justify-content-center">
          <button class="btn btn-outline-success" id="saveData">Log Position</button>
          <button class="btn btn-purple" id="addTextBox">+ Thêm text-box</button>
          <button class="btn" onclick="openSidebar()">⚙ Tùy chỉnh</button>
        </div>
        <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
      </div>
      <div class="modal-body">
        <!-- Overlay + Sidebar -->
  <div class="overlay" id="overlay" onclick="closeSidebar()"></div>

  <div class="sidebar" id="sidebar">
    <button class="close-btn" onclick="closeSidebar()">×</button>
    <h3>Bảng tùy chỉnh</h3>
    <!-- them -->
    <div id="textManager" style="margin:10px 0; padding:10px; border:1px solid #ccc;">
      <h3>Quản lý Text-Box</h3>
      <ul id="myList"></ul>
    </div>
    <!-- end -->
    <div class="field">
      <label>Dữ liệu liên kết</label>
      <select>
        <option>Bản ghi 1</option>
        <option>Bản ghi 2</option>
      </select>
    </div>
    <div class="field">
      <input type="range" id="fontSizeRange" min="10" max="200" step="1" value="24" />
      <input type="number" id="fontSizeInput" min="10" max="200" step="1" value="24" />
    </div>
    <div class="field">
      <label>Nội dung</label>
      <input type="text" value="Văn bản mẫu" />
    </div>

    <div class="field">
      <label>Font family</label>
      <select>
        <option>Inter</option>
        <option>Arial</option>
        <option>Times New Roman</option>
      </select>
    </div>

    <div class="field">
      <label>Màu chữ</label>
      <input type="color" value="#111827" />
    </div>
  </div>

  <!-- Nội dung chính -->
  <section class="main-container" style="overflow: auto; width: 100w; height: auto">
    <!-- <p>Nội dung canvas hoặc text box sẽ nằm ở đây.</p> -->
    <div id="c-container" style="border: 1px solid #ccc"></div>
  </section>
      </div>
      <div class="modal-footer">
        <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">Close</button>
        <button type="button" class="btn btn-primary">Save changes</button>
      </div>
    </div>
  </div>
</div>
  
  <div>
    <h5>Toa do</h5>
    <p class="result" id="result"></p>
  </div>
  <!-- ==============SCRIPT Konva ==========-->
  <script>
    //properties global
    let originalImageWidth = 0;
    let originalImageHeight = 0;
    var scaleFactor = 1;
    var offsetX = 0;
    var offsetY = 0;
  
    var transformer = new Konva.Transformer({
      // node: textNode, //loi chua biet textNode la gì
      enabledAnchors: [
        // "top-left",
        // "top-center",
        // "top-right",
        "middle-left",
        "middle-right",
        // "bottom-left",
        // "bottom-center",
        // "bottom-right",
      ],
      rotateEnabled: true,
      padding: 10,
    });

    var selectedTextNode = null;
    // 4. Tạo sẵn các text-box cố định (mapping DB field)
    const fixedFields = [
      { field: "name", label: "Tên" },
      { field: "dob", label: "Ngày sinh" },
      { field: "address", label: "Địa chỉ" },
      { field: "email", label: "Email" },
    ];
    //=============Initial Konva==========//
    const container = document.getElementById("container");
    const stage = new Konva.Stage({
      container: "c-container",
      width: 1100,
      height: 550,
      // fill: '#ccc'
    });
    //
    //==========Ve luoi grid
    function drawGrid(size, width, height) {
      for (let i = 0; i <= width / size; i++) {
        layer.add(
          new Konva.Line({
            points: [i * size, 0, i * size, height],
            stroke: "#ddd",
            strokeWidth: 1,
          })
        );
      }
      for (let j = 0; j <= height / size; j++) {
        layer.add(
          new Konva.Line({
            points: [0, j * size, width, j * size],
            stroke: "#ddd",
            strokeWidth: 1,
          })
        );
      }
    }
    //tao layer
    var layer = new Konva.Layer();
    var circle = new Konva.Circle({
      x: stage.width() / 2,
      y: stage.height() / 2,
      radius: 50,
      fill: "red",
    });
    circle.draggable("true");
    //====================
    //load anh
    // const background = new Konva.Image({
    //   x: 0,
    //   y: 0,
    //   width: stage.width(),
    //   height: stage.height(),
    // });
    //-------
    function loadImagetoStage(url){
      const imageObj = new Image();

      imageObj.onload = function(){
        // originalImageWidth = imageObj.width;
        // originalImageHeight = imageObj.height;
        // //tinh ti le scale vua stage
        // const scaleX = stage.width() / imageObj.width;
        // const scaleY = stage.height() /imageObj.height;
        // scaleFactor = Math.min(scaleX, scaleY);

        //------------------//
      //   debugger
      // imageWidth = imageObj.width;
      // imageHeight = imageObj.height;
      // console.log("kich thuoc goc cua anh:");
      // console.log(imageWidth+" "+imageHeight);
      // offsetX = stage.width() / imageWidth;
      // offsetY = stage.height() /imageHeight;
      // scaleFactor =Math.min(offsetX, offsetY);
      // const scaledWidth = imageWidth * scaleFactor;
      // const scaledHeight = imageHeight * scaleFactor;
      //
      originalImageWidth = imageObj.width;
      originalImageHeight = imageObj.height;
      stage.width(originalImageWidth);
      stage.height(originalImageHeight);
      ///==================add
      

        const konvaImg = new Konva.Image({
          image: imageObj,
          x: 0, //(stage.width() - scaledWidth) / 2
          y: 0, //(stage.height() - scaledHeight) / 2
          width: originalImageWidth,
          height: originalImageHeight
        });
      layer.add(konvaImg);
      konvaImg.moveToBottom();
      // 🔥 Vẽ lưới full theo ảnh
      drawGrid(50, originalImageWidth, originalImageHeight);

      layer.batchDraw();
      }
      imageObj.src = url;
    }
    //
    

    // layer.add(background); bo
    // layer.add(circle);
    loadImagetoStage("/uploads/volunteer_certificate/1758525477986.jpg");
    drawGrid(50); // grid cách nhau 50px
    layer.add(transformer);
    stage.add(layer);
    
    //--------load anh nen bo
    // const imageObj = new Image();
    // imageObj.onload = function () {
    //   background.image(imageObj);
    //   layer.draw();
    // };
    // imageObj.src = "/img/img-default.png";
    //them cac text-box khac
    document
      .getElementById("addTextBox")
      .addEventListener("click", function () {
        const name = prompt("Nhap ten field vao: ");
        createTextBox(name, name);
      });
    // Function tao cac text-box
    function createTextBox(
      fieldName,
      text,
      x = 50,
      y = 50,
      isFixed = false,
      fontSize = 20,
    ) {
      const textNode = new Konva.Text({
        text: text,
        x: x,
        y: y,
        fontSize: fontSize,
        draggable: true,
        fill: "green",
        name: fieldName,
        ellipsis: true,
        wrap: "word",
        align: "center",
        verticalAlign: "middle", // căn giữa theo chiều dọc (chỉ hiệu quả nếu có height)
      });
      // Cho phép sửa text nếu KHÔNG phải field cố định
      if (!isFixed) {
        textNode.on("dblclick", () => {
          const newText = prompt("Nhập text:", textNode.text());
          if (newText) textNode.text(newText);
          layer.draw();
        });
      }
      //test
      // Bắt sự kiện khi kéo thả
      textNode.on("dragmove", () => {
        document.getElementById('result').textContent =`X: ${textNode.x()} | Y:${ textNode.y()}`
        console.log("tọa độ hiện tại:", textNode.x(), textNode.y());
      });
      //
      textNode.on("click", (e) => {
        selectedTextNode = textNode;
        //dua ra cau hinh ngoai UI
        //  transformer.nodes([textNode]);
        transformer.nodes([textNode]); // gắn transformer vào text được chọn
        layer.draw();
      });
      textNode.on("transform", () => {
        const newWidth = textNode.width() * textNode.scaleX();
        textNode.width(newWidth);
        textNode.scaleX(1);

        // giữ nguyên chiều cao, chỉ resize ngang
        // textNode.height(textNode.height());
      });
      //
      layer.add(textNode);
      layer.draw();
    }
    //

    //
    stage.on("click", (e) => {
      if (e.target === stage) {
        transformer.nodes([]); // clear transformer
        selectedTextNode = null;
        layer.draw();
      }
    });
    //
    fixedFields.forEach((f, i) => {
      // Điều chỉnh vị trí khởi tạo của text-box để phù hợp với vị trí ảnh nền
      createTextBox(f.field, f.label, offsetX + 50, offsetY + 50 + i * 40, true);
    });
    //7. Luu data
    document
      .getElementById("saveData")
      .addEventListener("click", function () {
        const data = [];
        layer.find("Text").forEach((t) => {
          data.push({
            field: t.name(),
            text: t.text(),
            x: t.x() ,
            y: t.y(),
            w: t.width() ,
            h: t.height(),
            fontSize: t.fontSize(),
            fill: t.fill(),
          });
        });
        // SavePosition(data);
        console.log("data cac field: ", data);
        alert("Check console.log de xem data JSON ");
      });
    //
    function SavePosition(data){
      $.ajax({
        url:`/user-cert/save-position`,
        method: 'POST',
        contentType: 'application/json',
        data: JSON.stringify(data),
        success: (res)=>{
          // alert("thanh cong");
          console.log(res)
        },
        error: (err)=>{
          console.log(err);
        }
      })
    }
    //
    if (selectedTextNode) {
      console.log("run");
      document.getElementById("fontSizeInput").value =
        selectedTextNode.fontSize();
    }
    // Lắng nghe input UI để chỉnh text
    document
      .getElementById("fontSizeInput")
      .addEventListener("input", (e) => {
        if (selectedTextNode) {
          selectedTextNode.fontSize(parseInt(e.target.value));
          layer.draw();
        }
      });
    // them ui quan ly text-box
    const allTextBox = stage.find('Text');
    const ul = document.getElementById("myList");

    allTextBox.forEach((t, i) => {

      var li = document.createElement('li');
      li.innerHTML = t.name();
      li.style.padding ="5px 0"
      //
      var btn = document.createElement('button');
      btn.textContent = "Delete"
      btn.style.marginLeft ="10px";
      
      btn.onclick =()=>{
        t.destroy();
        layer.draw();
        li.remove();
      }
      li.append(btn)
      ul.appendChild(li);
    })
  </script>

  <script>
    function openSidebar() {
      document.getElementById("sidebar").classList.add("active");
      document.getElementById("overlay").classList.add("active");
      //
      // document.getElementById('fontSizeRange').vallue=fun
    }
    function closeSidebar() {
      document.getElementById("sidebar").classList.remove("active");
      document.getElementById("overlay").classList.remove("active");
    }
  </script>

<!-- //===================Out ==============// -->
 

</body>

</html>

