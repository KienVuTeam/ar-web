<script src="/admin/assets/js/plugins/tinymce/tinymce.min.js"></script>

<div class="progress-container">
  <% const steps = [ { id: 1, label: "Kh·ªüi t·∫°o" }, { id: 2, label: "AthleteData"
  }, { id: 3, label: "G·ª≠i Mail" }, { id: 4, label: "Checkin" }, { id: 5, label:
  "K·∫øt th√∫c" } ]; %>
  <!-- breadcrumb -->
  <div class="page-header">
    <div class="page-block">
      <div class="row align-items-center">
        <div class="col-md-12">
          <div class="page-header-title">
            <h5 class="m-b-10">Event</h5>
          </div>
          <ul class="breadcrumb">
            <li class="breadcrumb-item">
              <a href="/admin/event2/event-list">list</a>
            </li>
            <li class="breadcrumb-item">
              <a href="#!" onmouseover="this.style.color='red';">Race flow</a>
            </li>
          </ul>
        </div>
      </div>
    </div>
    <div class="step-action">
      <button id="next-step-btn" onclick="completeStep()">
        ‚úÖ X√°c nh·∫≠n ho√†n th√†nh
      </button>
    </div>
  </div>

  <!-- progress bar -->
  <div class="steps">
    <% steps.forEach(step => { %>
    <button
      class="step"
      data-id="<%= step.id %>"
      onclick="loadStep(<%= step.id %>)"
    >
      <span class="dot"></span>
      <span class="label"><%= step.label %></span>
    </button>
    <% }) %>
  </div>
</div>

<!-- ch·ªó ƒë·ªÉ nh√©t n·ªôi dung step -->
<div id="step-content"></div>

<!-- [tinyMCE] -->
<!-- <script src="/admin/assets/js/plugins/tinymce/tinymce.min.js"></script> -->

<script>
  const eventId2 = "<%= eventId %>";
  const eventId = localStorage.getItem('currentEventId')
  // let statusCurent = Number("<%= status %>");
  let statusCurent = Number("<%= status %>"); // l·∫•y status ban ƒë·∫ßu t·ª´ server

  function MyInitialTinymce() {
    // üî• Kh·ªüi t·∫°o TinyMCE l·∫°i
    if (typeof tinymce !== "undefined") {
      tinymce.remove(); // xo√° instance c≈© ƒë·ªÉ tr√°nh l·ªói
      tinymce.init({
        height: "300",
        selector: "#event-tinymce-4",
        content_style: 'body { font-family: "Inter", sans-serif; }',
        menubar: false,
        toolbar: [
          "styleselect fontselect fontsizeselect",
          "undo redo | cut copy paste | bold italic | link image | alignleft aligncenter alignright alignjustify",
          "bullist numlist | outdent indent | blockquote subscript superscript | advlist | autolink | lists charmap | print preview |  code",
        ],
        plugins: "advlist autolink link image lists charmap print preview code",
      });
    }
  }
  // H√†m update progress bar d·ª±a theo statusCurent
  function updateProgressBar() {
    // debugger;
    document.querySelectorAll(".step").forEach((el) => {
      const id = parseInt(el.getAttribute("data-id"));
      el.classList.toggle("active", id === statusCurent);
      el.classList.toggle("done", id < statusCurent);
      el.classList.toggle("disabled", id > statusCurent);
    });
  }

  // load partial theo step click
  function loadStep(step) {
    // debugger;
    // alert("eventId "+eventId)
    fetch(`/admin/event2/progress/step/${step}?id=${eventId}`)
      .then((res) => res.text())
      .then((html) => {


        const container = document.querySelector("#step-content");
        container.innerHTML = html;

        // T√¨m v√† th·ª±c thi c√°c script trong HTML v·ª´a g√°n
        container.querySelectorAll("script").forEach((script) => {
          const newScript = document.createElement("script");
          if (script.src) {
            // external script th√¨ ƒë·ªÉ browser t·ª± load l·∫°i
            newScript.src = script.src;
          } else {
            // inline script: copy text ƒë·ªÉ n√≥ ch·∫°y
            newScript.textContent = script.textContent;
          }
          document.body.appendChild(newScript);
          // tr√°nh tr√πng l·∫∑p, remove ƒëi n·∫øu kh√¥ng mu·ªën l∆∞u l·∫°i
          // document.body.removeChild(newScript); //bo
          document.body.appendChild(newScript);
        });
        // fix 19/09
        // Sau ƒë√≥ xo√° script trong container (ch·ª© kh√¥ng xo√° newScript)
        container.querySelectorAll("script").forEach(s => s.remove());
        // end fix 19/09
        MyInitialTinymce();

        // lu√¥n v·∫Ω l·∫°i progress bar theo statusCurent, ko theo step
        updateProgressBar();
        // fix 19/09
        // Sau khi load partial Edit
if (step == 1) {   // ho·∫∑c ki·ªÉm tra container c√≥ #galleryRoot
  const galleryRoot = document.getElementById("galleryRoot");
  if (galleryRoot) {
    const modalEl = document.getElementById("exampleModal");
    let currentTarget = null; // l∆∞u block n√†o ƒëang ch·ªçn ·∫£nh

    // B·∫Øt s·ª± ki·ªán click v√†o c√°c n√∫t "Choose image"
    document.querySelectorAll(".btn-choose-image").forEach(btn => {
      btn.addEventListener("click", function () {
        currentTarget = this.dataset.target; // thumb, banner, certificate
      });
    });
    if (modalEl) {
      modalEl.addEventListener("shown.bs.modal", function () {
        const galleryRoot = document.getElementById("galleryRoot");
        galleryRoot.innerHTML = ""; // clear c≈©
        MediaGallery.init(galleryRoot, {
          onSelect: (img) => {
            if (!currentTarget) return;
            document.getElementById("img_preview_"+currentTarget).style.display = "block";
            const preview = document.getElementById("img_preview_" + currentTarget);
            const input = document.getElementById("img_path_" + currentTarget);

            preview.querySelector("img").src = img.url;
            input.value = img.url;

            // ƒë√≥ng modal
            const closeBtn = modalEl.querySelector("[data-bs-dismiss='modal']");
            if (closeBtn) closeBtn.click();
          },
        });
      });
    }
  }
}

        // end fix
      });
  }

  // khi ·∫•n n√∫t ho√†n th√†nh step
  function completeStep() {
    const nextStep = statusCurent + 1; // ho·∫∑c logic g√¨ ƒë√≥ b·∫°n mu·ªën

    fetch("/admin/event2/change-status", {
      method: "POST",
      headers: { "Content-Type": "application/json" },
      body: JSON.stringify({ id: eventId, status: nextStep }),
    })
      .then((res) => res.json())
      .then((data) => {
        if (data.success) {
          statusCurent = nextStep; // ‚úÖ update bi·∫øn ƒë·ªông
          updateProgressBar();
          loadStep(statusCurent);
        }
      })
      .catch((err) => {
        console.error("‚ùå Fetch error:", err);
      });
  }

  // khi v√†o trang l·∫ßn ƒë·∫ßu
  window.addEventListener("DOMContentLoaded", () => {
    updateProgressBar();
    loadStep(statusCurent);
  });
</script>
<!-- Script gallery -->
 <script src="/js/my_gallery.js"></script>
 <script>
  document.addEventListener('DOMContentLoaded', function(){

  })
 </script>

 <!-- END -->
<style>
  .steps {
    display: flex;
    justify-content: space-between;
    position: relative;
    margin: 40px 0;
    padding: 0 20px;
  }

  .steps::before {
    content: "";
    position: absolute;
    top: 50%;
    left: 40px;
    right: 40px;
    height: 4px;
    background: #e5e7eb; /* x√°m nh·∫°t */
    transform: translateY(-50%);
    z-index: 0;
    border-radius: 2px;
  }

  .step {
    position: relative;
    background: none;
    border: none;
    flex: 1;
    text-align: center;
    cursor: pointer;
    z-index: 1;
  }

  .step .dot {
    width: 28px;
    height: 28px;
    border-radius: 50%;
    border: 3px solid #d1d5db; /* vi·ªÅn x√°m */
    background: #fff;
    margin: 0 auto;
    display: flex;
    align-items: center;
    justify-content: center;
    font-size: 14px;
    font-weight: bold;
    color: #9ca3af; /* ch·ªØ x√°m */
    transition: all 0.3s ease;
  }

  .step .label {
    margin-top: 10px;
    font-size: 14px;
    color: #6b7280; /* x√°m */
    transition: color 0.3s ease;
  }

  /* ---- DONE ---- */
  .step.done .dot {
    background: #4caf50; /* xanh */
    border-color: #4caf50;
    color: white;
  }
  .step.done .label {
    color: #4caf50;
  }

  /* ---- ACTIVE ---- */
  .step.active .dot {
    background: #2196f3;
    border-color: #2196f3;
    color: white;
    box-shadow: 0 0 12px rgba(33, 150, 243, 0.5);
  }
  .step.active .label {
    color: #2196f3;
    font-weight: 600;
  }

  /* ---- DISABLED ---- */
  .step.disabled .dot {
    border-color: #d1d5db;
    background: #f3f4f6;
    color: #9ca3af;
  }
  .step.disabled .label {
    color: #9ca3af;
  }
  .step.disabled {
    cursor: not-allowed;
    pointer-events: none;
  }

  /* hi·ªáu ·ª©ng hover cho b∆∞·ªõc ƒë√£ ho√†n th√†nh */
  .step.done:hover .dot,
  .step.active:hover .dot {
    transform: scale(1.1);
  }

  #next-step-btn {
    padding: 10px 20px;
    background: #2196f3;
    color: white;
    border: none;
    border-radius: 6px;
    cursor: pointer;
    font-weight: bold;
    transition: 0.3s;
  }

  #next-step-btn:hover {
    background: #1976d2;
  }
</style>
